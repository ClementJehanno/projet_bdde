------ Query 1 :

Regrouper les villes et leur pollution moyenne 

db.test_final.aggregate([{$group:{_id:"$COMMUNE_REF",indice_qualite_air:{$avg:"$Ind_qual_air"}}}])


------ Query 2 :

Compter le nombre de ville dont le code couleur est "Vert" (ce qui correspond à un niveau de pollution bas)

db.test_final.aggregate([{$match:{"Code_coul":{$eq:"VERT"}}},{$count :"nb_codes_vert"}])

On a fait la même chose pour le niveau rouge

db.test_final.aggregate([{$match:{"Code_coul":{$eq:"ROUGE"}}},{$count :"nb_codes_rouge"}])

db.test_final.aggregate([{$match:{"Code_coul":{$eq:"ORANGE"}}},{$count :"nb_codes_orange"}])

------ Query 3 :


Surface totale de réserve naturelle par commune de référence

db.test_final.aggregate([{$group:{_id:"$COMMUNE_REF", somme_surface:{$sum:"$Surface_m2"}}}])

------ Pour aller un peu plus loin

Nous avons décidé de ne pas trop nous attarder sur des requêtes "basiques" l'idée étant de pousser un peu noSQL pour voir ce que l'on pouvait faire

------ Query 4 :

On cherche à établir une corrélation entre la pollution des villes et le nombre de montées et descente des trains.
Pour ce faire on aligne deux requêtes : 
La première nous permet juste de regrouper par ville_proche les pollutions moyennes (requête 1).

db.test_final.aggregate([{$group:{_id:"$COMMUNE_REF", pollution_moyenne:{$avg:"$Ind_qual_air"}}}])

Ensuite on regarde, toujours par les villes les plus proches, la moyenne des montées et descente en gares.

db.test_final.aggregate([{$group:{_id:"$COMMUNE_REF", moy_montee_descente:{$avg:"$Montees_descente_par_gare"}}}])

On peut donc au final traduire cette requête par la suivante : 

db.test_final.aggregate([{$group:{_id:"$COMMUNE_REF", moy_montee_descente:{$avg:"$Montees_descente_par_gare"},  pollution_moyenne:{$avg:"$Ind_qual_air"}}}])

------ Query 5 :

Voir par année l'évolution des montées/descente des gares et du trafic routier.

db.test_final.aggregate([{$group:{_id:"$Annee", somme_montee_descentes:{$sum:"$Mont_desc_gares"}, somme_trafic_routier:{$sum:"$Moy_jour_ann_tous_vehi"}}}])

Pour avoir un joli affichage : 

db.test_final.aggregate([{$group:{_id:"$Annee", somme_montee_descentes:{$sum:"$Mont_desc_gares"}, somme_trafic_routier:{$sum:"$Moy_jour_ann_tous_vehi"}}}, {$sort:{"_id":1}}])

------ Query 6 :

Pour l'année 2009 on aimerai savoir combien de voiture sont passées. Pour ce faire on a le champ moyenne, on va donc faire la somme des moyennes pour chaque commune.

db.test_final.aggregate([{$match:{Annee:{$eq:2009}}}, {$group:{_id:"$COMMUNE_REF", somme_voiture:{$sum:"$Moy_jour_ann_tous_vehi"}}}])

On a voulu augmenter la requête pour trouver la somme des poids_lourd :

db.test_final.aggregate([{$match:{Annee:{$eq:2009}}}, {$group:{_id:"$COMMUNE_REF", somme_voiture:{$sum:"$Moy_jour_ann_tous_vehi"}, somme_poids_lourd:{$sum:"$Moy_jour_ann_poidsL"}}}])

Comme nos attributs sont appelés sur l'année on pourrait aussi comparer entre 2009 et 2010


------ Query 7 :

Requêtes pour avoir le nombre de routes dans une commune et l'écart type de qualité de l'air dans cette commune de réference

------ Query 8 :

Récupérer les résèrves naturelles les plus proches des villes et voir sur ces résèrves et sur ces villes, lequelles ont l'indice de pollution le plus bas et voir si les résèrves naturelles sont proches ou pas

db.test_final.aggregate([{$group:{_id:"$COMMUNE_REF", somme_surface:{$sum:"$Surface_m2"}, indice_qualite_air:{$avg:"$Ind_qual_air"}}}, {$sort:{"somme_surface":-1}}])

Si on veut afficher les noms des réserves

db.test_final.aggregate([{$group:{_id:"$COMMUNE_REF", nom:{$push:"$Nom_res_nat"}, somme_surface:{$sum:"$Surface_m2"}, indice_qualite_air:{$avg:"$Ind_qual_air"}}}, {$sort:{"somme_surface":-1}}])

------ Query 9 :


------ Query 10 :

